name: Test Helm Chart

on:
  # This workflow is now primarily for manual testing and detailed debugging
  # The main integration test runs as part of ci.yml
  workflow_dispatch:

jobs:
  test-helm-chart:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Helm
        uses: azure/setup-helm@v4
        with:
          version: '3.14.0'

      - name: Set up kubectl
        uses: azure/setup-kubectl@v4
        with:
          version: 'latest'

      - name: Create KinD cluster
        uses: helm/kind-action@v1
        with:
          cluster_name: valkey-test

      - name: Wait for cluster to be ready
        run: |
          kubectl cluster-info
          kubectl wait --for=condition=Ready nodes --all --timeout=300s

      - name: Build and load Docker image
        run: |
          docker build -t valkey-leader:test .
          kind load docker-image valkey-leader:test --name valkey-test

      - name: Install Helm chart
        run: |
          helm install valkey-test ./helm/valkey-leader \
            --set valkeyLeader.image.repository=valkey-leader \
            --set valkeyLeader.image.tag=test \
            --set valkeyLeader.image.pullPolicy=Never \
            --wait --timeout=300s

      - name: Wait for StatefulSet to be ready
        run: |
          kubectl wait --for=condition=Ready pod -l app.kubernetes.io/name=valkey-leader --timeout=300s
          kubectl get pods -l app.kubernetes.io/name=valkey-leader

      - name: Wait for services to stabilize
        run: |
          echo "Waiting for services to stabilize..."
          sleep 10

      - name: Check services are created
        run: |
          kubectl get services -l app.kubernetes.io/name=valkey-leader
          echo "Headless service:"
          kubectl get service valkey-test-headless
          echo "Read service:"
          kubectl get service valkey-test-r
          echo "Read-write service:"
          kubectl get service valkey-test-rw
          echo "Read-only service:"
          kubectl get service valkey-test-ro

      - name: Test Valkey connectivity and operations
        run: |
          # Install redis-cli in a temporary pod for testing
          kubectl run redis-cli-test --rm -i --restart=Never --image=redis:7-alpine -- sh -c '
            # Test write operations (should connect to primary via read-write service)
            echo "Testing write operations..."
            redis-cli -h valkey-test-valkey-leader-rw -p 6379 set test-key "hello world"
            redis-cli -h valkey-test-valkey-leader-rw -p 6379 set counter 0
            redis-cli -h valkey-test-valkey-leader-rw -p 6379 incr counter

            # Test read operations (should work from any service)
            echo "Testing read operations..."
            echo "Reading from read-write service:"
            redis-cli -h valkey-test-valkey-leader-rw -p 6379 get test-key
            redis-cli -h valkey-test-valkey-leader-rw -p 6379 get counter

            echo "Reading from read service:"
            redis-cli -h valkey-test-valkey-leader-r -p 6379 get test-key
            redis-cli -h valkey-test-valkey-leader-r -p 6379 get counter

            echo "Reading from read-only service:"
            redis-cli -h valkey-test-valkey-leader-ro -p 6379 get test-key
            redis-cli -h valkey-test-valkey-leader-ro -p 6379 get counter

            # Test replication by checking info
            echo "Checking replication status on read-write service:"
            redis-cli -h valkey-test-valkey-leader-rw -p 6379 info replication

            echo "Test completed successfully!"
          '

      - name: Test leader election and failover
        run: |
          # Get the current leader pod
          echo "Getting current leader pod..."
          LEADER_POD=$(kubectl get pods -l app.kubernetes.io/name=valkey-leader -o jsonpath='{.items[*].metadata.name}' | tr ' ' '\n' | head -1)
          echo "Current potential leader: $LEADER_POD"

          # Check which pod is actually the primary by connecting to the read-write service
          kubectl run redis-cli-test --rm -i --restart=Never --image=redis:7-alpine -- sh -c '
            echo "Checking which pod is the primary..."
            redis-cli -h valkey-test-valkey-leader-rw -p 6379 info server | grep "# Server"
          '

          # Delete the leader pod to test failover
          echo "Deleting leader pod to test failover..."
          kubectl delete pod $LEADER_POD

          # Wait for the StatefulSet to recreate the pod
          kubectl wait --for=condition=Ready pod -l app.kubernetes.io/name=valkey-leader --timeout=300s

          # Wait a bit for leader election to happen
          sleep 30

          # Test that the service still works after failover
          kubectl run redis-cli-test --rm -i --restart=Never --image=redis:7-alpine -- sh -c '
            echo "Testing service after failover..."
            redis-cli -h valkey-test-valkey-leader-rw -p 6379 set failover-test "success"
            redis-cli -h valkey-test-valkey-leader-rw -p 6379 get failover-test
            redis-cli -h valkey-test-valkey-leader-rw -p 6379 get test-key
            echo "Failover test completed successfully!"
          '

      - name: Check logs for any errors
        if: always()
        run: |
          echo "=== Pod Status ==="
          kubectl get pods -l app.kubernetes.io/name=valkey-leader

          echo "=== Valkey Leader Logs ==="
          for pod in $(kubectl get pods -l app.kubernetes.io/name=valkey-leader -o jsonpath='{.items[*].metadata.name}'); do
            echo "--- Logs for $pod (valkey-leader container) ---"
            kubectl logs $pod -c valkey-leader --tail=50 || true
            echo "--- Logs for $pod (valkey container) ---"
            kubectl logs $pod -c valkey --tail=50 || true
          done

      - name: Test cleanup
        if: always()
        run: |
          helm uninstall valkey-test || true
          kubectl get pods -l app.kubernetes.io/name=valkey-leader || true
